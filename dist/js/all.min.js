'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var kah = kah || {};
kah.tentconfigurator = kah.tentconfigurator || {};
kah.tentconfigurator.googleAPILoaded = new Promise(function (resolve) {
  jQuery(window).on('kahGoogleAPILoaded', function () {
    resolve();
  });
});

kah.tentconfigurator.Tent = function Tent(id, title, price, length, width, minPersons, maxPersons) {
  _classCallCheck(this, Tent);

  this.id = id;
  this.title = title;
  this.price = price;
  this.length = length;
  this.width = width;
  this.minPersons = minPersons;
  this.maxPersons = maxPersons;
  this.squareMeter = this.length * this.width;
};

kah.tentconfigurator.Equipment = function Equipment(id, title, price, description) {
  _classCallCheck(this, Equipment);

  this.id = id;
  this.title = title;
  this.price = price;
  this.description = description;
};

kah.tentconfigurator.WizardStep = function () {
  function WizardStep() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var wizardForm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, WizardStep);

    this.name = name;
    this.active = ko.observable(false);
    this.activeSubStep = ko.observable();
    this.wizardForm = wizardForm;
    this.isVisible = ko.computed(function () {
      return this.active() && !this.activeSubStep();
    }, this);
  }

  _createClass(WizardStep, [{
    key: 'openSubStep',
    value: function openSubStep(substep) {
      substep.active(true);
      this.activeSubStep(substep);
    }
  }, {
    key: 'closeSubStep',
    value: function closeSubStep() {
      this.activeSubStep().active(false);
      this.activeSubStep(null);
    }
  }, {
    key: 'removeDataRow',
    value: function removeDataRow() {
      throw new Error('Override this function');
    }
  }]);

  return WizardStep;
}();

kah.tentconfigurator.WizardSubStep = function (_kah$tentconfigurator) {
  _inherits(WizardSubStep, _kah$tentconfigurator);

  function WizardSubStep(parent) {
    var _ref;

    _classCallCheck(this, WizardSubStep);

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = WizardSubStep.__proto__ || Object.getPrototypeOf(WizardSubStep)).call.apply(_ref, [this].concat(args)));

    _this.parent = parent;
    _this.isVisible = ko.computed(function () {
      return this.active() && this.parent.active();
    }, _this);
    return _this;
  }

  return WizardSubStep;
}(kah.tentconfigurator.WizardStep);

kah.tentconfigurator.WizardStepTents = function (_kah$tentconfigurator2) {
  _inherits(WizardStepTents, _kah$tentconfigurator2);

  function WizardStepTents() {
    var _ref2;

    _classCallCheck(this, WizardStepTents);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var _this2 = _possibleConstructorReturn(this, (_ref2 = WizardStepTents.__proto__ || Object.getPrototypeOf(WizardStepTents)).call.apply(_ref2, [this].concat(args)));

    _this2.selectTentsSubStep = new kah.tentconfigurator.WizardStepSelectTents(_this2);
    _this2.openSubStep(_this2.selectTentsSubStep);
    return _this2;
  }

  _createClass(WizardStepTents, [{
    key: 'openSelectTent',
    value: function openSelectTent() {
      this.openSubStep(this.selectTentsSubStep);
    }
  }, {
    key: 'removeDataRow',
    value: function removeDataRow(tent) {
      this.wizardForm.selectedTents.remove(tent);
    }
  }]);

  return WizardStepTents;
}(kah.tentconfigurator.WizardStep);

kah.tentconfigurator.WizardStepEquipment = function (_kah$tentconfigurator3) {
  _inherits(WizardStepEquipment, _kah$tentconfigurator3);

  function WizardStepEquipment() {
    var _ref3;

    _classCallCheck(this, WizardStepEquipment);

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var _this3 = _possibleConstructorReturn(this, (_ref3 = WizardStepEquipment.__proto__ || Object.getPrototypeOf(WizardStepEquipment)).call.apply(_ref3, [this].concat(args)));

    _this3.selectEquipmentubStep = new kah.tentconfigurator.WizardStepSelectEquipment(_this3);
    _this3.openSubStep(_this3.selectEquipmentubStep);
    return _this3;
  }

  _createClass(WizardStepEquipment, [{
    key: 'openSelectEquipment',
    value: function openSelectEquipment() {
      this.openSubStep(this.selectEquipmentubStep);
    }
  }, {
    key: 'removeDataRow',
    value: function removeDataRow(equipment) {
      this.wizardForm.selectedEquipment.remove(equipment);
    }
  }]);

  return WizardStepEquipment;
}(kah.tentconfigurator.WizardStep);

kah.tentconfigurator.WizardStepEvent = function (_kah$tentconfigurator4) {
  _inherits(WizardStepEvent, _kah$tentconfigurator4);

  function WizardStepEvent() {
    _classCallCheck(this, WizardStepEvent);

    return _possibleConstructorReturn(this, (WizardStepEvent.__proto__ || Object.getPrototypeOf(WizardStepEvent)).apply(this, arguments));
  }

  return WizardStepEvent;
}(kah.tentconfigurator.WizardStep);

kah.tentconfigurator.WizardStepContact = function (_kah$tentconfigurator5) {
  _inherits(WizardStepContact, _kah$tentconfigurator5);

  function WizardStepContact() {
    var _ref4;

    _classCallCheck(this, WizardStepContact);

    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    var _this5 = _possibleConstructorReturn(this, (_ref4 = WizardStepContact.__proto__ || Object.getPrototypeOf(WizardStepContact)).call.apply(_ref4, [this].concat(args)));

    _this5.availableGenders = ko.observableArray(['Herr', 'Frau']);
    return _this5;
  }

  return WizardStepContact;
}(kah.tentconfigurator.WizardStep);

kah.tentconfigurator.WizardStepSelectTents = function (_kah$tentconfigurator6) {
  _inherits(WizardStepSelectTents, _kah$tentconfigurator6);

  function WizardStepSelectTents(parent) {
    var _ref5;

    _classCallCheck(this, WizardStepSelectTents);

    for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
      args[_key5 - 1] = arguments[_key5];
    }

    return _possibleConstructorReturn(this, (_ref5 = WizardStepSelectTents.__proto__ || Object.getPrototypeOf(WizardStepSelectTents)).call.apply(_ref5, [this, parent].concat(args)));
  }

  _createClass(WizardStepSelectTents, [{
    key: 'selectTent',
    value: function selectTent(tent) {
      this.parent.wizardForm.selectedTents.push(Object.assign(new kah.tentconfigurator.Tent(), tent));
      this.parent.closeSubStep();
    }
  }]);

  return WizardStepSelectTents;
}(kah.tentconfigurator.WizardSubStep);

kah.tentconfigurator.WizardStepSelectEquipment = function (_kah$tentconfigurator7) {
  _inherits(WizardStepSelectEquipment, _kah$tentconfigurator7);

  function WizardStepSelectEquipment() {
    _classCallCheck(this, WizardStepSelectEquipment);

    return _possibleConstructorReturn(this, (WizardStepSelectEquipment.__proto__ || Object.getPrototypeOf(WizardStepSelectEquipment)).apply(this, arguments));
  }

  _createClass(WizardStepSelectEquipment, [{
    key: 'selectEquipment',
    value: function selectEquipment(equipment) {
      this.parent.wizardForm.selectedEquipment.push(Object.assign(new kah.tentconfigurator.Equipment(), equipment));
      this.parent.closeSubStep();
    }
  }]);

  return WizardStepSelectEquipment;
}(kah.tentconfigurator.WizardSubStep);

kah.tentconfigurator.WizardForm = function () {
  function WizardForm() {
    _classCallCheck(this, WizardForm);

    this.firstName = ko.observable();
    this.lastName = ko.observable();
    this.salutation = ko.observable();
    this.company = ko.observable();
    this.street = ko.observable();
    this.streetnr = ko.observable();
    this.zip = ko.observable();
    this.location = ko.observable();
    this.email = ko.observable();
    this.phone = ko.observable();
    this.comment = ko.observable();
    this.acceptTerms = ko.observable(false);

    this.eventname = ko.observable();
    this.eventdays = ko.observable(1);
    this.eventlocation = ko.observable();
    this.eventlocationdistance = ko.observable(0);
    this.eventstartdate = ko.observable();

    this.tents = ko.observableArray();
    this.equipment = ko.observableArray();
    this.selectedTents = ko.observableArray();
    this.selectedEquipment = ko.observableArray();
    this.transportPrice = ko.computed(function () {
      if (this.eventlocationdistance() <= 10000) {
        return 0;
      } else {
        // 50.- each 30km * 2 (for twice the distance)
        return Math.ceil(this.eventlocationdistance() / 1000 / 30) * 50 * 2;
      }
    }, this);
    this.totalTentsPrice = ko.computed(function () {
      return this._count_objs_attribute(this.selectedTents(), 'price');
    }, this);
    this.totalEquipmentPrice = ko.computed(function () {
      return this._count_objs_attribute(this.selectedEquipment(), 'price');
    }, this);
    this.totalPrice = ko.computed(function () {
      // Includes the eventdays
      return (this.totalTentsPrice() + this.totalEquipmentPrice()) * this.eventdays() + this.transportPrice();
    }, this);
    this.totalMinPersons = ko.computed(function () {
      return this._count_objs_attribute(this.selectedTents(), 'minPersons');
    }, this);
    this.totalMaxPersons = ko.computed(function () {
      return this._count_objs_attribute(this.selectedTents(), 'maxPersons');
    }, this);
    this.totalSquareMeters = ko.computed(function () {
      return this._count_objs_attribute(this.selectedTents(), 'squareMeter');
    }, this);
  }

  _createClass(WizardForm, [{
    key: '_count_objs_attribute',
    value: function _count_objs_attribute(objs, attr) {
      var total = 0;
      objs.forEach(function (obj) {
        total += obj[attr];
      });
      return total;
    }
  }]);

  return WizardForm;
}();

kah.tentconfigurator.Wizard = function () {
  function Wizard() {
    _classCallCheck(this, Wizard);

    this.debug = false;
    if (typeof ajaxurl === 'undefined') {
      // wordpress sets the ajaxurl in the global scope.
      // If the ajaxurl is not initialized, we are not in a wordpress
      // environment.
      this.debug = true;
    }
    this.loadData();
    this.form = new kah.tentconfigurator.WizardForm();
    // 0 = Fillout, 1 = Success, 2 = Error, 3 = pending, 4 = FormValidation error
    this.mode = ko.observable(0);
    this.submitted = ko.observable(false);
    this.steps = ko.observableArray([new kah.tentconfigurator.WizardStepTents('Zelt', this.form), new kah.tentconfigurator.WizardStepEquipment('Zubehör', this.form), new kah.tentconfigurator.WizardStepEvent('Anlass', this.form), new kah.tentconfigurator.WizardStepContact('Kontakt', this.form)]);
    this.addressNotFound = ko.observable(false);
    this.currentStep = ko.observable(this.steps()[0]);
    this.isLastStep = ko.computed(function () {
      return this.currentWizardStepId() >= this.steps().length - 1;
    }, this);
    this.showPrevButton = ko.computed(function () {
      return this.currentWizardStepId() > 0;
    }, this);
    this.nextButtonText = ko.computed(function () {
      if (this.isLastStep()) {
        return "Offerte anfordern";
      }
      return "Weiter";
    }, this);
    this.showNextButton = true;
    ko.computed(function () {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.steps()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var step = _step.value;

          step.active(false);
          if (this.currentStep() == step) {
            step.active(true);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }, this);
    jQuery(document).on('focusout', 'input[required], select[required]', function (self) {
      return function () {
        self.validateField(this);
      };
    }(this));
    kah.tentconfigurator.googleAPILoaded.then(function (self) {
      return function () {
        self.initGoogleSearch();
      };
    }(this));
  }

  _createClass(Wizard, [{
    key: 'next',
    value: function next() {
      if (this.isLastStep()) {
        this.send();
      } else {
        this.currentStep(this.steps()[this.currentWizardStepId() + 1]);
      }
    }
  }, {
    key: 'previous',
    value: function previous() {
      this.currentStep(this.steps()[this.currentWizardStepId() - 1]);
    }
  }, {
    key: 'loadData',
    value: function loadData() {
      var self = this;
      var request = this._make_request({ action: 'kah_get_data' });
      request.then(function (response) {
        var tents = [];
        var equipment = [];
        if (self.debug) {
          tents = [new kah.tentconfigurator.Tent(1, 'Zelttitel 1', 0, 4, 20, 100, 150), new kah.tentconfigurator.Tent(2, 'Zelttitel 2', 30, 8, 20, 200, 300), new kah.tentconfigurator.Tent(3, 'Zelttitel 3', 50, 12, 20, 150, 300)];
          equipment = [new kah.tentconfigurator.Equipment(1, 'Lampe', 5, 'kleine Lampe für das DJ Pult'), new kah.tentconfigurator.Equipment(2, 'Bodenplatte 30x30 cm', 0, 'Um den Boden zu schützen'), new kah.tentconfigurator.Equipment(3, 'Tisch - 3 Meter ', 9, "für 6 Personen"), new kah.tentconfigurator.Equipment(4, 'Tisch - 5 Meter ', 9, "für 9 Personen")];
        } else {
          response.tents.forEach(function (tent) {
            tents.push(new kah.tentconfigurator.Tent(tent.id, tent.title, tent.price, tent.length, tent.width, tent.minPersons, tent.maxPersons));
          });
          response.equipment.forEach(function (equipmentItem) {
            equipment.push(new kah.tentconfigurator.Equipment(equipmentItem.id, equipmentItem.title, equipmentItem.price, equipmentItem.description));
          });
        }
        self.form.tents(tents);
        self.form.equipment(equipment);
      });
    }
  }, {
    key: 'send',
    value: function send() {
      jQuery(window).scrollTop(0);
      if (!this.validateForm()) {
        this.mode(4);
        return;
      }
      this.mode(3);
      var self = this;
      var data = {
        action: 'kah_send_offer',
        salutation: this.form.salutation(),
        firstName: this.form.firstName(),
        lastName: this.form.lastName(),
        company: this.form.company(),
        street: this.form.street(),
        streetnr: this.form.streetnr(),
        zip: this.form.zip(),
        location: this.form.location(),
        email: this.form.email(),
        phone: this.form.phone(),
        comment: this.form.comment(),
        acceptTerms: this.form.acceptTerms(),
        eventname: this.form.eventname(),
        eventdays: this.form.eventdays(),
        eventlocation: this.form.eventlocation(),
        eventlocationdistance: this.form.eventlocationdistance(),
        eventstartdate: this.form.eventstartdate(),
        transportPrice: this.form.transportPrice(),
        totalTentsPrice: this.form.totalTentsPrice(),
        totalEquipmentPrice: this.form.totalEquipmentPrice(),
        totalPrice: this.form.totalPrice(),
        totalMinPersons: this.form.totalMinPersons(),
        totalMaxPersons: this.form.totalMaxPersons(),
        totalSquareMeters: this.form.totalSquareMeters(),
        selectedTents: this.form.selectedTents(),
        selectedEquipment: this.form.selectedEquipment()
      };

      var request = this._make_request(data);
      request.then(function () {
        self.mode(1);self.submitted(true);
      }, function () {
        self.mode(2);
      });
    }
  }, {
    key: 'readablePrice',
    value: function readablePrice(price) {
      return price + ' CHF';
    }
  }, {
    key: 'readablePersons',
    value: function readablePersons(minPersons, maxPersons) {
      return minPersons + ' - ' + maxPersons + ' Personen';
    }
  }, {
    key: 'currentWizardStepId',
    value: function currentWizardStepId() {
      return this.steps().indexOf(this.currentStep());
    }
  }, {
    key: '_make_request',
    value: function _make_request(data) {
      var self = this;
      return new Promise(function (resolve, reject) {

        if (self.debug) {
          window.setTimeout(function () {
            resolve();
          }, 2000);
        } else {
          jQuery.post(ajaxurl, data).done(function (response) {
            if (typeof response.success !== 'undefined' && !response.success) {
              reject();
            } else {
              resolve(response);
            }
          }).fail(function (error) {
            reject(error);
          });
        }
      });
    }
  }, {
    key: 'validateForm',
    value: function validateForm() {
      var isInvalidForm = false;
      jQuery('#wizard-form input[required], #wizard-form select[required]').each(function (self) {
        return function (counter, field) {
          if (!self.validateField(field)) {
            if (!isInvalidForm) {
              self.currentStep(ko.dataFor(jQuery(field).closest('.wizardStepView')[0]));
              isInvalidForm = true;
            }
          }
        };
      }(this));
      return !isInvalidForm; // Returns true if the form is valid
    }
  }, {
    key: 'validateField',
    value: function validateField(field) {
      var msgBox = jQuery('.formValidationError', jQuery(field).closest('td'))[0];
      if (field.checkValidity()) {
        jQuery(msgBox).hide();
        return true;
      } else {
        msgBox.innerHTML = field.validationMessage;
        jQuery(msgBox).show();
        return false;
      }
    }
  }, {
    key: 'calculateDistance',
    value: function calculateDistance(place) {
      var self = this;
      if (typeof place === 'undefined') {
        self.addressNotFound(true);
        return;
      }

      var origin = 'Hauptstrasse 95, 1715 Alterswil, Schweiz';
      var destination = new google.maps.LatLng(place.geometry.location.lat(), place.geometry.location.lng());
      var service = new google.maps.DistanceMatrixService();
      service.getDistanceMatrix({
        origins: [origin],
        destinations: [destination],
        travelMode: google.maps.TravelMode.DRIVING }, function (response, status) {
        if (status == google.maps.DistanceMatrixStatus.OK) {
          var distancematrix = response.rows[0].elements[0];
          if (distancematrix.status == google.maps.DistanceMatrixStatus.OK) {
            self.form.eventlocationdistance(distancematrix.distance.value);
            self.addressNotFound(false);
          }
        }
      });
    }
  }, {
    key: 'initGoogleSearch',
    value: function initGoogleSearch() {
      var input = document.getElementById('eventlocation');
      var searchBox = new google.maps.places.SearchBox(input);
      searchBox.addListener('places_changed', function (self) {
        return function () {
          self.calculateDistance(searchBox.getPlaces()[0]);
        };
      }(this));
      google.maps.event.addDomListener(input, 'keydown', function (e) {
        if (e.keyCode == 13) {
          e.preventDefault();
        }
      });
    }
  }]);

  return Wizard;
}();

kah.tentconfigurator.initGoogleSearch = function () {
  jQuery(window).trigger('kahGoogleAPILoaded');
};

jQuery(window).on('load', function () {
  if (jQuery('#wizard-form').length > 0) {
    ko.applyBindings(new kah.tentconfigurator.Wizard(), document.getElementById('wizard-form'));
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
