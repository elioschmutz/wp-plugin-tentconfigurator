'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Tent = function Tent(name, price, length, width, minPersons, maxPersons) {
  _classCallCheck(this, Tent);

  this.name = name;
  this.price = price;
  this.length = length;
  this.width = width;
  this.minPersons = minPersons;
  this.maxPersons = maxPersons;
  this.squareMeter = this.length * this.width;
};

var Equipment = function Equipment(title, price, description) {
  _classCallCheck(this, Equipment);

  this.title = title;
  this.price = price;
  this.description = description;
};

var tents = [new Tent('Zelttitel 1', 15, 4, 20, 100, 150), new Tent('Zelttitel 2', 30, 8, 20, 200, 300), new Tent('Zelttitel 3', 50, 12, 20, 150, 300)];

var equipments = [new Equipment('Lampe', 5, 'kleine Lampe f端r das DJ Pult'), new Equipment('Bodenplatte 30x30 cm', 2, 'Um den Boden zu sch端tzen'), new Equipment('Tisch - 3 Meter ', 9, "f端r 6 Personen"), new Equipment('Tisch - 5 Meter ', 9, "f端r 9 Personen")];

var WizardStep = function () {
  function WizardStep() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var wizardForm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, WizardStep);

    this.name = name;
    this.active = ko.observable(false);
    this.activeSubStep = ko.observable();
    this.wizardForm = wizardForm;
    this.isVisible = ko.computed(function () {
      return this.active() && !this.activeSubStep();
    }, this);
  }

  _createClass(WizardStep, [{
    key: 'openSubStep',
    value: function openSubStep(substep) {
      substep.active(true);
      this.activeSubStep(substep);
    }
  }, {
    key: 'closeSubStep',
    value: function closeSubStep() {
      this.activeSubStep().active(false);
      this.activeSubStep(null);
    }
  }, {
    key: 'removeDataRow',
    value: function removeDataRow() {
      throw new Error('Override this function');
    }
  }]);

  return WizardStep;
}();

var WizardSubStep = function (_WizardStep) {
  _inherits(WizardSubStep, _WizardStep);

  function WizardSubStep(parent) {
    var _ref;

    _classCallCheck(this, WizardSubStep);

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = WizardSubStep.__proto__ || Object.getPrototypeOf(WizardSubStep)).call.apply(_ref, [this].concat(args)));

    _this.parent = parent;
    _this.isVisible = ko.computed(function () {
      return this.active() && this.parent.active();
    }, _this);
    return _this;
  }

  return WizardSubStep;
}(WizardStep);

var WizardStepTents = function (_WizardStep2) {
  _inherits(WizardStepTents, _WizardStep2);

  function WizardStepTents() {
    var _ref2;

    _classCallCheck(this, WizardStepTents);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var _this2 = _possibleConstructorReturn(this, (_ref2 = WizardStepTents.__proto__ || Object.getPrototypeOf(WizardStepTents)).call.apply(_ref2, [this].concat(args)));

    _this2.selectTentsSubStep = new WizardStepSelectTents(_this2);
    _this2.openSubStep(_this2.selectTentsSubStep);
    return _this2;
  }

  _createClass(WizardStepTents, [{
    key: 'openSelectTent',
    value: function openSelectTent() {
      this.openSubStep(this.selectTentsSubStep);
    }
  }, {
    key: 'removeDataRow',
    value: function removeDataRow(tent) {
      this.wizardForm.selectedTents.remove(tent);
    }
  }]);

  return WizardStepTents;
}(WizardStep);

var WizardStepEquipments = function (_WizardStep3) {
  _inherits(WizardStepEquipments, _WizardStep3);

  function WizardStepEquipments() {
    var _ref3;

    _classCallCheck(this, WizardStepEquipments);

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var _this3 = _possibleConstructorReturn(this, (_ref3 = WizardStepEquipments.__proto__ || Object.getPrototypeOf(WizardStepEquipments)).call.apply(_ref3, [this].concat(args)));

    _this3.selectEquipmentSubStep = new WizardStepSelectEquipment(_this3);
    _this3.openSubStep(_this3.selectEquipmentSubStep);
    return _this3;
  }

  _createClass(WizardStepEquipments, [{
    key: 'openSelectEquipment',
    value: function openSelectEquipment() {
      this.openSubStep(this.selectEquipmentSubStep);
    }
  }, {
    key: 'removeDataRow',
    value: function removeDataRow(equipment) {
      this.wizardForm.selectedEquipments.remove(equipment);
    }
  }]);

  return WizardStepEquipments;
}(WizardStep);

var WizardStepEvent = function (_WizardStep4) {
  _inherits(WizardStepEvent, _WizardStep4);

  function WizardStepEvent() {
    _classCallCheck(this, WizardStepEvent);

    return _possibleConstructorReturn(this, (WizardStepEvent.__proto__ || Object.getPrototypeOf(WizardStepEvent)).apply(this, arguments));
  }

  return WizardStepEvent;
}(WizardStep);

var WizardStepContact = function (_WizardStep5) {
  _inherits(WizardStepContact, _WizardStep5);

  function WizardStepContact() {
    var _ref4;

    _classCallCheck(this, WizardStepContact);

    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    var _this5 = _possibleConstructorReturn(this, (_ref4 = WizardStepContact.__proto__ || Object.getPrototypeOf(WizardStepContact)).call.apply(_ref4, [this].concat(args)));

    _this5.availableGenders = ko.observableArray(['', 'Herr', 'Frau']);
    return _this5;
  }

  return WizardStepContact;
}(WizardStep);

var WizardStepSelectTents = function (_WizardSubStep) {
  _inherits(WizardStepSelectTents, _WizardSubStep);

  function WizardStepSelectTents(parent) {
    var _ref5;

    _classCallCheck(this, WizardStepSelectTents);

    for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
      args[_key5 - 1] = arguments[_key5];
    }

    return _possibleConstructorReturn(this, (_ref5 = WizardStepSelectTents.__proto__ || Object.getPrototypeOf(WizardStepSelectTents)).call.apply(_ref5, [this, parent].concat(args)));
  }

  _createClass(WizardStepSelectTents, [{
    key: 'selectTent',
    value: function selectTent(tent) {
      this.parent.wizardForm.selectedTents.push(Object.assign(new Tent(), tent));
      this.parent.closeSubStep();
    }
  }]);

  return WizardStepSelectTents;
}(WizardSubStep);

var WizardStepSelectEquipment = function (_WizardSubStep2) {
  _inherits(WizardStepSelectEquipment, _WizardSubStep2);

  function WizardStepSelectEquipment() {
    _classCallCheck(this, WizardStepSelectEquipment);

    return _possibleConstructorReturn(this, (WizardStepSelectEquipment.__proto__ || Object.getPrototypeOf(WizardStepSelectEquipment)).apply(this, arguments));
  }

  _createClass(WizardStepSelectEquipment, [{
    key: 'selectEquipment',
    value: function selectEquipment(equipment) {
      this.parent.wizardForm.selectedEquipments.push(Object.assign(new Equipment(), equipment));
      this.parent.closeSubStep();
    }
  }]);

  return WizardStepSelectEquipment;
}(WizardSubStep);

var WizardForm = function () {
  function WizardForm() {
    _classCallCheck(this, WizardForm);

    this.firstName = ko.observable();
    this.lastName = ko.observable();
    this.salutation = ko.observable();
    this.company = ko.observable();
    this.street = ko.observable();
    this.streetnr = ko.observable();
    this.zip = ko.observable();
    this.location = ko.observable();
    this.email = ko.observable();
    this.phone = ko.observable();
    this.eventdays = ko.observable(1);
    this.eventlocation = ko.observable();
    this.eventlocationdistance = ko.observable(0);

    this.tents = ko.observableArray(tents.sort(function (a, b) {
      return a.minPersons - b.minPersons;
    }));
    this.equipments = ko.observableArray(equipments);
    this.selectedTents = ko.observableArray();
    this.selectedEquipments = ko.observableArray();
    this.transportPrice = ko.computed(function () {
      if (this.eventlocationdistance() <= 10000) {
        return 0;
      } else {
        // 50.- each 30km * 2 (for twice the distance)
        return Math.ceil(this.eventlocationdistance() / 1000 / 30) * 50 * 2;
      }
    }, this);
    this.totalTentsPrice = ko.computed(function () {
      return this._count_objs_attribute(this.selectedTents(), 'price');
    }, this);
    this.totalEquipmentsPrice = ko.computed(function () {
      return this._count_objs_attribute(this.selectedEquipments(), 'price');
    }, this);
    this.totalPrice = ko.computed(function () {
      return (this.totalTentsPrice() + this.totalEquipmentsPrice()) * this.eventdays() + this.transportPrice();
    }, this);
    this.totalMinPersons = ko.computed(function () {
      return this._count_objs_attribute(this.selectedTents(), 'minPersons');
    }, this);
    this.totalMaxPersons = ko.computed(function () {
      return this._count_objs_attribute(this.selectedTents(), 'maxPersons');
    }, this);
    this.totalSquareMeters = ko.computed(function () {
      return this._count_objs_attribute(this.selectedTents(), 'squareMeter');
    }, this);
  }

  _createClass(WizardForm, [{
    key: '_count_objs_attribute',
    value: function _count_objs_attribute(objs, attr) {
      var total = 0;
      objs.forEach(function (obj) {
        total += obj[attr];
      });
      return total;
    }
  }]);

  return WizardForm;
}();

var Wizard = function () {
  function Wizard() {
    _classCallCheck(this, Wizard);

    this.debug = false;
    if (typeof ajaxurl === 'undefined') {
      // wordpress sets the ajaxurl in the global scope.
      // If the ajaxurl is not initialized, we are not in a wordpress
      // environment.
      this.debug = true;
    }
    this.form = new WizardForm();
    // 0 = Fillout, 1 = Success, 2 = Error, 3 = pending, 4 = FormValidation error
    this.mode = ko.observable(0);
    this.steps = ko.observableArray([new WizardStepTents('Zelt', this.form), new WizardStepEquipments('Zubeh旦r', this.form), new WizardStepEvent('Anlass', this.form), new WizardStepContact('Kontakt', this.form)]);
    this.addressNotFound = ko.observable(false);
    this.currentStep = ko.observable(this.steps()[0]);
    this.isLastStep = ko.computed(function () {
      return this.currentWizardStepId() >= this.steps().length - 1;
    }, this);
    this.showPrevButton = ko.computed(function () {
      return this.currentWizardStepId() > 0;
    }, this);
    this.nextButtonText = ko.computed(function () {
      if (this.isLastStep()) {
        return "Offerte anfordern";
      }
      return "Weiter";
    }, this);
    this.showNextButton = true;
    // this.showSendButton = ko.computed(function() {
    //   return this.currentWizardStepId() == this.steps().length -1;
    // }, this);
    ko.computed(function () {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.steps()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var step = _step.value;

          step.active(false);
          if (this.currentStep() == step) {
            step.active(true);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }, this);

    jQuery(document).on('focusout', 'input[required], select[required]', function (self) {
      return function () {
        self.validateField(this);
      };
    }(this));
  }

  _createClass(Wizard, [{
    key: 'next',
    value: function next() {
      if (this.isLastStep()) {
        this.send();
      } else {
        this.currentStep(this.steps()[this.currentWizardStepId() + 1]);
      }
    }
  }, {
    key: 'previous',
    value: function previous() {
      this.currentStep(this.steps()[this.currentWizardStepId() - 1]);
    }
  }, {
    key: 'send',
    value: function send() {
      jQuery(window).scrollTop(0);
      if (!this.validateForm()) {
        this.mode(4);
        return;
      }
      this.mode(3);
      var self = this;
      var data = {
        action: 'kah_send_tent_configurator',
        firstName: this.form.firstName(),
        lastName: this.form.lastName(),
        salutation: this.form.salutation(),
        company: this.form.company(),
        street: this.form.street(),
        streetnr: this.form.streetnr(),
        zip: this.form.zip(),
        location: this.form.location(),
        email: this.form.email(),
        phone: this.form.phone(),
        selectedTents: this.form.selectedTents(),
        selectedEquipments: this.form.selectedEquipments(),
        totalTentsPrice: this.form.totalTentsPrice(),
        totalEquipmentsPrice: this.form.totalEquipmentsPrice(),
        totalPrice: this.form.totalPrice(),
        totalMinPersons: this.form.totalMinPersons(),
        totalMaxPersons: this.form.totalMaxPersons(),
        totalSquareMeters: this.form.totalSquareMeters()
      };
      var request = this._make_request(data);
      request.then(function () {
        self.mode(1);
      }, function () {
        self.mode(2);
      });
    }
  }, {
    key: 'readablePrice',
    value: function readablePrice(price) {
      return price + ' CHF';
    }
  }, {
    key: 'readablePersons',
    value: function readablePersons(minPersons, maxPersons) {
      return minPersons + ' - ' + maxPersons + ' Personen';
    }
  }, {
    key: 'currentWizardStepId',
    value: function currentWizardStepId() {
      return this.steps().indexOf(this.currentStep());
    }
  }, {
    key: '_make_request',
    value: function _make_request(data) {
      var self = this;
      return new Promise(function (resolve, reject) {

        if (self.debug) {
          window.setTimeout(function () {
            resolve();
          }, 2000);
        } else {
          jQuery.post(ajaxurl, data).done(function () {
            resolve();
          }).fail(function () {
            reject();
          });
        }
      });
    }
  }, {
    key: 'validateForm',
    value: function validateForm() {
      var valid = true;
      var setInvalidForm = true;
      $('input[required], select[required]').each(function (self) {
        return function (counter, field) {
          if (!self.validateField(field)) {
            valid = false;
            if (setInvalidForm) {
              self.currentStep(ko.dataFor($(field).closest('.wizardStepView')[0]));
              setInvalidForm = false;
            }
          }
        };
      }(this));
      return valid;
    }
  }, {
    key: 'validateField',
    value: function validateField(field) {
      var msgBox = field.previousElementSibling;
      if (field.checkValidity()) {
        $(msgBox).hide();
        return true;
      } else {
        msgBox.innerHTML = field.validationMessage;
        $(msgBox).show();
        return false;
      }
    }
  }, {
    key: 'calculateDistance',
    value: function calculateDistance(place) {
      var self = this;
      console.log(place);
      if (typeof place === 'undefined') {
        self.addressNotFound(true);
        return;
      };

      var origin = 'Hauptstrasse 95, 1715 Alterswil, Schweiz';
      var destination = new google.maps.LatLng(place.geometry.location.lat(), place.geometry.location.lng());
      var service = new google.maps.DistanceMatrixService();
      service.getDistanceMatrix({
        origins: [origin],
        destinations: [destination],
        travelMode: google.maps.TravelMode.DRIVING }, function (response, status) {
        if (status == google.maps.DistanceMatrixStatus.OK) {
          var distancematrix = response.rows[0].elements[0];
          if (distancematrix.status == google.maps.DistanceMatrixStatus.OK) {
            self.form.eventlocationdistance(distancematrix.distance.value);
            self.addressNotFound(false);
          }
        }
      });
    }
  }, {
    key: 'initGoogleSearch',
    value: function initGoogleSearch() {
      // We call this funciton from outside. So we have to set 
      // the wizard itself to be able to access its functions.
      var self = window.wizard;
      jQuery(window).on('load', function () {
        var input = document.getElementById('eventlocation');
        var searchBox = new google.maps.places.SearchBox(input);
        searchBox.addListener('places_changed', function () {
          self.calculateDistance(searchBox.getPlaces()[0]);
        });
        google.maps.event.addDomListener(input, 'keydown', function (e) {
          if (e.keyCode == 13) {
            e.preventDefault();
          }
        });
      });
    }
  }]);

  return Wizard;
}();

window.wizard = new Wizard();
var initGoogleSearch = window.wizard.initGoogleSearch;

jQuery(window).on('load', function () {
  ko.applyBindings(window.wizard, document.getElementById('wizard-form'));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
